// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrustedFormSwift
import Alamofire
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension SwiftUI.View {
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole) -> some SwiftUI.View
  
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole, text: Swift.String) -> some SwiftUI.View
  
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole, binding: SwiftUI.Binding<Swift.String>) -> some SwiftUI.View
  
  public func sensitive(_ isSensitive: Swift.Bool = true) -> some SwiftUI.View
  
  public func onStartTracking(_ action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
extension SwiftUI.TextField {
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole, binding: SwiftUI.Binding<Swift.String>) -> some SwiftUI.View
  
}
extension SwiftUI.Toggle {
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole, binding: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View
  
}
extension SwiftUI.Button {
  public func tfElementRole(_ role: TrustedFormSwift.TFElementRole, title: Swift.String) -> some SwiftUI.View
  
}
public struct ConsentView : Swift.Decodable {
  public let id: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public typealias SubmissionId = Swift.String
public struct Certificate : Swift.Decodable {
  public let id: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isSensitive: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tfElementRole: TrustedFormSwift.TFElementRole? {
    get
    set
  }
}
public enum TFElementRole : Swift.Equatable {
  case submit(submissionId: TrustedFormSwift.SubmissionId, label: Swift.String, index: Swift.Int? = nil)
  case consentLanguage(submissionId: Swift.String, index: Swift.Int? = nil)
  case consentLanguageInput(submissionId: Swift.String, label: Swift.String, index: Swift.Int? = nil)
  case consentOptedAdvertiserInput(submissionId: TrustedFormSwift.SubmissionId, label: Swift.String, index: Swift.Int? = nil)
  case consentOptedAdvertiserName(submissionId: TrustedFormSwift.SubmissionId, index: Swift.Int? = nil)
  case consentTrackedField(submissionId: TrustedFormSwift.SubmissionId, index: Swift.Int? = nil)
  case consentTrackedInput(submissionId: TrustedFormSwift.SubmissionId, label: Swift.String, index: Swift.Int? = nil)
  case consentTrackedText(submissionId: TrustedFormSwift.SubmissionId, label: Swift.String)
  public var submissionId: Swift.String? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var certificateLabel: Swift.String {
    get
  }
  public static func == (a: TrustedFormSwift.TFElementRole, b: TrustedFormSwift.TFElementRole) -> Swift.Bool
}
public struct Consent : Swift.Decodable {
  public let id: Swift.String
  public enum ConsentType : Swift.String, Swift.Decodable {
    case tcpa, ccpa, patriotAct
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class TrustedForm {
  public static func enableVerboseLogging()
  public static let `default`: TrustedFormSwift.TrustedForm
  final public func configure(appId: Swift.String, accessToken: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  final public func createCertificate() async throws -> TrustedFormSwift.Certificate
  #endif
  final public func addScreenshot(to certificate: TrustedFormSwift.Certificate, delay: Foundation.TimeInterval = 0) throws
  final public func startTracking(for certificate: TrustedFormSwift.Certificate)
  final public func stopTracking(for certificate: TrustedFormSwift.Certificate)
  @objc deinit
}
extension TrustedFormSwift.Consent.ConsentType : Swift.Equatable {}
extension TrustedFormSwift.Consent.ConsentType : Swift.Hashable {}
extension TrustedFormSwift.Consent.ConsentType : Swift.RawRepresentable {}
